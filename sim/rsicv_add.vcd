$date
	Mon Jul 11 17:24:42 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_riscv_add $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$scope module m_riscv_soc $end
$var wire 1 ! clk $end
$var wire 1 " rst_n $end
$var wire 32 # inst_addr [31:0] $end
$var wire 32 $ inst [31:0] $end
$scope module m_rom $end
$var wire 32 % inst_o [31:0] $end
$var wire 32 & inst_addr_i [31:0] $end
$upscope $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 32 ' inst_i [31:0] $end
$var wire 1 " rst_n $end
$var wire 32 ( regs_rs2_data [31:0] $end
$var wire 32 ) regs_rs1_data [31:0] $end
$var wire 32 * pc_io [31:0] $end
$var wire 32 + inst_addr_o [31:0] $end
$var wire 32 , if_inst_addr [31:0] $end
$var wire 32 - if_inst [31:0] $end
$var wire 32 . if_id_inst_addr [31:0] $end
$var wire 32 / if_id_inst [31:0] $end
$var wire 5 0 id_wd_addr [4:0] $end
$var wire 5 1 id_rs2_addr [4:0] $end
$var wire 5 2 id_rs1_addr [4:0] $end
$var wire 1 3 id_reg_wen $end
$var wire 32 4 id_op_2 [31:0] $end
$var wire 32 5 id_op_1 [31:0] $end
$var wire 32 6 id_inst_addr [31:0] $end
$var wire 32 7 id_inst [31:0] $end
$var wire 32 8 id_ex_rs2_data [31:0] $end
$var wire 32 9 id_ex_rs1_data [31:0] $end
$var wire 1 : id_ex_rd_wen $end
$var wire 5 ; id_ex_rd_addr [4:0] $end
$var wire 32 < id_ex_inst_addr [31:0] $end
$var wire 32 = id_ex_inst [31:0] $end
$var wire 1 > ex_rd_wen $end
$var wire 32 ? ex_rd_data [31:0] $end
$var wire 5 @ ex_rd_addr [4:0] $end
$var wire 1 A ex_jump_ena $end
$var wire 32 B ex_jump_addr [31:0] $end
$var wire 1 C ex_hold_flag $end
$var wire 1 D ctrl_jump_ena $end
$var wire 32 E ctrl_jump_addr [31:0] $end
$var wire 1 F ctrl_hold_flag $end
$scope module m_ctrl $end
$var wire 1 F hold_flag_o $end
$var wire 32 G jump_addr_o [31:0] $end
$var wire 1 D jump_ena_o $end
$var wire 1 A jump_ena_i $end
$var wire 32 H jump_addr_i [31:0] $end
$var wire 1 C hold_flag_i $end
$upscope $end
$scope module m_ex $end
$var wire 32 I rs2_data_i [31:0] $end
$var wire 5 J rs2 [4:0] $end
$var wire 32 K rs1_data_i [31:0] $end
$var wire 5 L rs1 [4:0] $end
$var wire 1 : rd_wen_i $end
$var wire 5 M rd_addr_i [4:0] $end
$var wire 5 N rd [4:0] $end
$var wire 7 O opcode [6:0] $end
$var wire 1 P op1_i_equal_op2_i $end
$var wire 32 Q jump_imm [31:0] $end
$var wire 32 R inst_i [31:0] $end
$var wire 32 S inst_addr_i [31:0] $end
$var wire 7 T func7 [6:0] $end
$var wire 3 U func3 [2:0] $end
$var reg 1 C hold_flag_o $end
$var reg 32 V jump_addr_o [31:0] $end
$var reg 1 A jump_ena_o $end
$var reg 5 W rd_addr_o [4:0] $end
$var reg 32 X rd_data_o [31:0] $end
$var reg 1 > rd_wen_o $end
$upscope $end
$scope module m_id $end
$var wire 32 Y inst_addr_o [31:0] $end
$var wire 32 Z inst_o [31:0] $end
$var wire 32 [ rs2_data_i [31:0] $end
$var wire 5 \ rs2 [4:0] $end
$var wire 32 ] rs1_data_i [31:0] $end
$var wire 5 ^ rs1 [4:0] $end
$var wire 5 _ rd [4:0] $end
$var wire 7 ` opcode [6:0] $end
$var wire 32 a inst_i [31:0] $end
$var wire 32 b inst_addr_i [31:0] $end
$var wire 7 c func7 [6:0] $end
$var wire 3 d func3 [2:0] $end
$var reg 32 e op_1_o [31:0] $end
$var reg 32 f op_2_o [31:0] $end
$var reg 1 3 reg_wen $end
$var reg 5 g rs1_addr_o [4:0] $end
$var reg 5 h rs2_addr_o [4:0] $end
$var reg 5 i wd_addr_o [4:0] $end
$upscope $end
$scope module m_id_ex $end
$var wire 1 ! clk $end
$var wire 1 F hold_flag_i $end
$var wire 32 j inst_addr_i [31:0] $end
$var wire 32 k inst_i [31:0] $end
$var wire 1 3 rd_wen_i $end
$var wire 32 l rs1_data_i [31:0] $end
$var wire 32 m rs2_data_i [31:0] $end
$var wire 1 " rst_n $end
$var wire 5 n wd_addr_i [4:0] $end
$var reg 32 o inst_addr_o [31:0] $end
$var reg 32 p inst_o [31:0] $end
$var reg 5 q rd_addr_o [4:0] $end
$var reg 1 : rd_wen_o $end
$var reg 32 r rs1_data_o [31:0] $end
$var reg 32 s rs2_data_o [31:0] $end
$upscope $end
$scope module m_if_id $end
$var wire 1 ! clk $end
$var wire 1 F hold_flag_i $end
$var wire 1 " rst_n $end
$var wire 32 t inst_i [31:0] $end
$var wire 32 u inst_addr_i [31:0] $end
$var reg 32 v inst_addr_o [31:0] $end
$var reg 32 w inst_o [31:0] $end
$upscope $end
$scope module m_ifeach $end
$var wire 32 x if_rom_addr_o [31:0] $end
$var wire 32 y inst_addr_o [31:0] $end
$var wire 32 z inst_o [31:0] $end
$var wire 32 { rom_inst_i [31:0] $end
$var wire 32 | pc_addr_i [31:0] $end
$upscope $end
$scope module m_pc_reg $end
$var wire 1 ! clk $end
$var wire 32 } jump_addr_i [31:0] $end
$var wire 1 D jump_ena_i $end
$var wire 1 " rst_n $end
$var reg 32 ~ pc_o [31:0] $end
$upscope $end
$scope module m_regs $end
$var wire 1 ! clk $end
$var wire 5 !" reg1_raddr_i [4:0] $end
$var wire 5 "" reg2_raddr_i [4:0] $end
$var wire 5 #" reg_waddr_i [4:0] $end
$var wire 32 $" reg_wdata_i [31:0] $end
$var wire 1 > reg_wen $end
$var wire 1 " rst_n $end
$var reg 32 %" reg1_rdata_o [31:0] $end
$var reg 32 &" reg2_rdata_o [31:0] $end
$var integer 32 '" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
bx ~
b0 }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
b0 n
b0 m
b0 l
bx k
bx j
b0 i
b0 h
b0 g
b0 f
b0 e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
b0 ]
bx \
b0 [
bx Z
bx Y
b0 X
b0 W
b0 V
bx U
bx T
bx S
bx R
bx0 Q
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
b0 H
b0 G
0F
b0 E
0D
0C
b0 B
0A
b0 @
b0 ?
0>
bx =
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
b0 5
b0 4
03
b0 2
b0 1
b0 0
bx /
bx .
bx -
bx ,
bx +
bx *
b0 )
b0 (
bx '
bx &
bx %
bx $
bx #
0"
0!
$end
#10
13
b0 Q
b10011000000000110110010011 -
b10011000000000110110010011 t
b10011000000000110110010011 z
b10011000000000110110010011 $
b10011000000000110110010011 %
b10011000000000110110010011 '
b10011000000000110110010011 {
b0 c
b0 \
b0 ^
b0 d
b0 _
b10011 `
b0 T
b0 J
b0 L
b0 U
b0 N
b10011 O
b0 ,
b0 u
b0 y
b0 #
b0 &
b0 +
b0 x
b0 *
b0 |
b0 ~
b0 6
b0 Y
b0 j
b0 .
b0 b
b0 v
b10011 7
b10011 Z
b10011 k
b10011 /
b10011 a
b10011 w
0:
b0 ;
b0 M
b0 q
1P
b0 8
b0 I
b0 s
b0 9
b0 K
b0 r
b10011 =
b10011 R
b10011 p
b0 <
b0 S
b0 o
b100000 '"
1!
#20
0!
#30
b11011 0
b11011 i
b11011 n
b100110 4
b100110 f
b100110 m
1>
b1 c
b110 \
b11011 _
b111100000000000111000010011 -
b111100000000000111000010011 t
b111100000000000111000010011 z
b111100000000000111000010011 $
b111100000000000111000010011 %
b111100000000000111000010011 '
b111100000000000111000010011 {
1:
b10011000000000110110010011 7
b10011000000000110110010011 Z
b10011000000000110110010011 k
b10011000000000110110010011 /
b10011000000000110110010011 a
b10011000000000110110010011 w
b100 ,
b100 u
b100 y
b100 #
b100 &
b100 +
b100 x
b100 *
b100 |
b100 ~
1!
1"
#40
0!
#50
b11100 0
b11100 i
b11100 n
b1111000 4
b1111000 f
b1111000 m
b100000111010 Q
b1110011011000111010110011 -
b1110011011000111010110011 t
b1110011011000111010110011 z
b1110011011000111010110011 $
b1110011011000111010110011 %
b1110011011000111010110011 '
b1110011011000111010110011 {
b11 c
b11000 \
b11100 _
b100110 ?
b100110 X
b100110 $"
b11011 @
b11011 W
b11011 #"
b1 T
b110 J
b11011 N
b1000 ,
b1000 u
b1000 y
b1000 #
b1000 &
b1000 +
b1000 x
b1000 *
b1000 |
b1000 ~
b100 6
b100 Y
b100 j
b100 .
b100 b
b100 v
b111100000000000111000010011 7
b111100000000000111000010011 Z
b111100000000000111000010011 k
b111100000000000111000010011 /
b111100000000000111000010011 a
b111100000000000111000010011 w
b11011 ;
b11011 M
b11011 q
0P
b100110 8
b100110 I
b100110 s
b10011000000000110110010011 =
b10011000000000110110010011 R
b10011000000000110110010011 p
1!
#60
0!
#70
b100110 5
b100110 e
b100110 l
b1111100 Q
b1111000 (
b1111000 [
b1111000 &"
b100110 )
b100110 ]
b100110 %"
b11101 0
b11101 i
b11101 n
b1111000 4
b1111000 f
b1111000 m
b11100 1
b11100 h
b11100 ""
b11011 2
b11011 g
b11011 !"
b11 T
b11000 J
b11100 N
b1111000 ?
b1111000 X
b1111000 $"
b11100 @
b11100 W
b11100 #"
b0 c
b11100 \
b11011 ^
b11101 _
b110011 `
bx -
bx t
bx z
bx $
bx %
bx '
bx {
b11100 ;
b11100 M
b11100 q
b1111000 8
b1111000 I
b1111000 s
b111100000000000111000010011 =
b111100000000000111000010011 R
b111100000000000111000010011 p
b100 <
b100 S
b100 o
b1000 6
b1000 Y
b1000 j
b1000 .
b1000 b
b1000 v
b1110011011000111010110011 7
b1110011011000111010110011 Z
b1110011011000111010110011 k
b1110011011000111010110011 /
b1110011011000111010110011 a
b1110011011000111010110011 w
b1100 ,
b1100 u
b1100 y
b1100 #
b1100 &
b1100 +
b1100 x
b1100 *
b1100 |
b1100 ~
1!
#80
0!
#90
b0 (
b0 [
b0 &"
b0 )
b0 ]
b0 %"
03
b0 0
b0 i
b0 n
b0 4
b0 f
b0 m
b0 5
b0 e
b0 l
b0 1
b0 h
b0 ""
b0 2
b0 g
b0 !"
b100000011100 Q
bx c
bx \
bx ^
bx d
bx _
bx `
b0 T
b11100 J
b11011 L
b11101 N
b110011 O
b10011110 ?
b10011110 X
b10011110 $"
b11101 @
b11101 W
b11101 #"
b10000 ,
b10000 u
b10000 y
b10000 #
b10000 &
b10000 +
b10000 x
b10000 *
b10000 |
b10000 ~
b1100 6
b1100 Y
b1100 j
b1100 .
b1100 b
b1100 v
bx 7
bx Z
bx k
bx /
bx a
bx w
b11101 ;
b11101 M
b11101 q
b100110 9
b100110 K
b100110 r
b1110011011000111010110011 =
b1110011011000111010110011 R
b1110011011000111010110011 p
b1000 <
b1000 S
b1000 o
1!
#100
0!
#110
bx0 Q
bx T
bx J
bx L
bx U
bx N
bx O
0>
b0 @
b0 W
b0 #"
b0 ?
b0 X
b0 $"
0:
b0 ;
b0 M
b0 q
1P
b0 8
b0 I
b0 s
b0 9
b0 K
b0 r
bx =
bx R
bx p
b1100 <
b1100 S
b1100 o
b10000 6
b10000 Y
b10000 j
b10000 .
b10000 b
b10000 v
b10100 ,
b10100 u
b10100 y
b10100 #
b10100 &
b10100 +
b10100 x
b10100 *
b10100 |
b10100 ~
1!
#120
0!
#130
b11000 ,
b11000 u
b11000 y
b11000 #
b11000 &
b11000 +
b11000 x
b11000 *
b11000 |
b11000 ~
b10100 6
b10100 Y
b10100 j
b10100 .
b10100 b
b10100 v
b10000 <
b10000 S
b10000 o
1!
#140
0!
#150
b10100 <
b10100 S
b10100 o
b11000 6
b11000 Y
b11000 j
b11000 .
b11000 b
b11000 v
b11100 ,
b11100 u
b11100 y
b11100 #
b11100 &
b11100 +
b11100 x
b11100 *
b11100 |
b11100 ~
1!
#160
0!
#170
b100000 ,
b100000 u
b100000 y
b100000 #
b100000 &
b100000 +
b100000 x
b100000 *
b100000 |
b100000 ~
b11100 6
b11100 Y
b11100 j
b11100 .
b11100 b
b11100 v
b11000 <
b11000 S
b11000 o
1!
#180
0!
#190
b11100 <
b11100 S
b11100 o
b100000 6
b100000 Y
b100000 j
b100000 .
b100000 b
b100000 v
b100100 ,
b100100 u
b100100 y
b100100 #
b100100 &
b100100 +
b100100 x
b100100 *
b100100 |
b100100 ~
1!
#200
0!
#210
b101000 ,
b101000 u
b101000 y
b101000 #
b101000 &
b101000 +
b101000 x
b101000 *
b101000 |
b101000 ~
b100100 6
b100100 Y
b100100 j
b100100 .
b100100 b
b100100 v
b100000 <
b100000 S
b100000 o
1!
#220
0!
#230
b100100 <
b100100 S
b100100 o
b101000 6
b101000 Y
b101000 j
b101000 .
b101000 b
b101000 v
b101100 ,
b101100 u
b101100 y
b101100 #
b101100 &
b101100 +
b101100 x
b101100 *
b101100 |
b101100 ~
1!
